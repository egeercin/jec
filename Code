import pandas as pd
import smtplib
import os
import time
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import logging
from typing import List, Tuple
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('email_campaign.log'),
        logging.StreamHandler()
    ]
)

# Configuration
class Config:
    EXCEL_FILE = os.getenv('EXCEL_FILE_PATH')
    SHEET_NAME = os.getenv('SHEET_NAME', 'Sheet1')
    SMTP_SERVER = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
    SMTP_PORT = int(os.getenv('SMTP_PORT', '587'))
    SENDER_EMAIL = os.getenv('SENDER_EMAIL')
    SENDER_PASSWORD = os.getenv('SENDER_PASSWORD')
    DELAY_BETWEEN_EMAILS = int(os.getenv('DELAY_BETWEEN_EMAILS', '2'))

def validate_config() -> bool:
    """Validate essential configuration settings."""
    required_vars = ['EXCEL_FILE_PATH', 'SENDER_EMAIL', 'SENDER_PASSWORD']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logging.error(f"Missing required environment variables: {', '.join(missing_vars)}")
        return False
        
    if not os.path.exists(Config.EXCEL_FILE):
        logging.error(f"Excel file not found: {Config.EXCEL_FILE}")
        return False
    return True

def get_companies_and_emails() -> List[Tuple[str, str]]:
    """
    Extract company names and email addresses from Excel file.
    Returns list of tuples containing (company_name, email).
    """
    try:
        df = pd.read_excel(Config.EXCEL_FILE, sheet_name=Config.SHEET_NAME)
        logging.info(f"Successfully loaded Excel file with columns: {df.columns.tolist()}")
        
        # Filter valid contacts - assuming column structure matches your data
        valid_contacts = df[(df.iloc[:, 2].astype(str).str.lower() == "email") & 
                          df.iloc[:, 0].notna()]
        
        contacts = valid_contacts.iloc[:, [0, 3]].values.tolist()
        logging.info(f"Found {len(contacts)} valid contacts")
        return contacts
    
    except Exception as e:
        logging.error(f"Error reading Excel file: {str(e)}")
        return []

def create_email_content(company_name: str) -> Tuple[str, str]:
    """Generate email subject and body."""
    subject = "Sponsorship Opportunity - JEC Canada Adrenaline Event"
    
    body = f"""
Dear {company_name} Executive,

I'm Ege from the Finance team at JEC Canada, a non-profit organization dedicated to empowering future business leaders.

This year, we're hosting Adrenaline, our flagship event at the Globe and Mail Center, featuring career panels, case studies, and networking opportunities with top industry professionals, including Forbes 30 Under 30 honorees.

We'd love to partner with {company_name} to provide attendees with business-oriented materials, helping them kickstart their professional journeys. In return, your organization would gain exposure to our:
• 25,000+ website visits
• Extensive social media reach
• 1,000+ engaged students

We're not asking for much funding, in fact, anything would help us make this event a success. We believe that your support can make a significant impact on the future of these students.
I'd love to discuss this further - please let me know if you'd be open for a call! Additionally, you can visit www.jeccanada.org to learn more about our initiatives.

Best regards,
{os.getenv('SENDER_NAME', 'Ege Ercin')}
Finance Team | JEC Canada
"""
    return subject, body

def send_email(company_name: str, recipient_email: str) -> bool:
    """
    Send email to a single recipient.
    Returns True if successful, False otherwise.
    """
    subject, body = create_email_content(company_name)
    
    msg = MIMEMultipart()
    msg['From'] = Config.SENDER_EMAIL
    msg['To'] = recipient_email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))
    
    try:
        with smtplib.SMTP(Config.SMTP_SERVER, Config.SMTP_PORT) as server:
            server.starttls()
            server.login(Config.SENDER_EMAIL, Config.SENDER_PASSWORD)
            server.send_message(msg)
            logging.info(f"Successfully sent email to {company_name} ({recipient_email})")
            return True
            
    except Exception as e:
        logging.error(f"Failed to send email to {company_name} ({recipient_email}): {str(e)}")
        return False

def main():
    """Main execution function."""
    if not validate_config():
        return
    
    contacts = get_companies_and_emails()
    if not contacts:
        logging.error("No valid contacts found to process")
        return
    
    successful_sends = 0
    failed_sends = 0
    
    for company, email in contacts:
        if send_email(company, email):
            successful_sends += 1
        else:
            failed_sends += 1
        time.sleep(Config.DELAY_BETWEEN_EMAILS)  # Avoid triggering spam filters
    
    logging.info(f"Campaign completed. Successful: {successful_sends}, Failed: {failed_sends}")

if __name__ == "__main__":
    main()
